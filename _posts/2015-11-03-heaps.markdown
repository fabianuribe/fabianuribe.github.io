---
layout: post
title: "Data Structures in Javascript: Heaps"
date: 2015-10-31 14:00:00
category: blog
tags: [Computer-Science, Data-Structures, Javascript]
---

The *Heap* is a great example of how the right data structure can dramatically change the performance of an algorithm, for example the sort operation using Heapsort can be achieved in linearithmic time and constant space.

A *Heap* is a tree-based data structure, it is very efficient executing operations of a priority queue, such as inserts and getting the min/max. A *Heap* can be classified as a *Max Heap* or a *Min Heap*. In order to satisfy the *Heap* property, in a *Max Heap* the value on all the parent nodes should be greater than or equal to its children value. On the other hand in a *Min Heap* the value on all the parent nodes will be less than or equal to its children value.

### The implementation
A simple Array allows us to store a  *Heap* without the need of pointers. Where the index for the children of each parent can be obtained:

>
> __Left__ = Parent * 2 + 1  
> __Right__ = Parent * 2 + 2
>

The Heap  will implement the following basic operations :

- Build
- Insert
- Remove Top
- Search
- String representation

{% gist fabianuribe/5eeeaf5370d03f66f739 heap.js %}

The complete source code for this data structure's including the unit tests for this implementation are included [here](https://gist.github.com/fabianuribe/5eeeaf5370d03f66f739#file-heap-js).

### Complexity

<div class="complexity-table">
    <table>
        <thead>
            <tr>
                <th>Operation</th>
                <th>Complexity</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Sort</td>
                <td>O(n log n)</td>
            </tr>
            <tr>
                <td>Search</td>
                <td>O(n)</td>
            </tr>
            <tr>
                <td>Insert</td>
                <td>O(log n)</td>
            </tr>
            <tr>
                <td>Delete</td>
                <td>O(log n)</td>
            </tr>
            <tr>
                <td>Max/Min</td>
                <td>O(1)</td>
            </tr>
        </tbody>
    </table>
</div>

### The Good

- Sorting is achieved in best time space/complexity.

### The Bad

- Searching is slow since we can't leverage fast searching algorithms such as Binary Search.
